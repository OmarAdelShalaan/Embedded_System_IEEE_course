
2_led_2pushbutton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000360  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000696  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define F_CPU 1000000UL
#include<avr/io.h>
#include<avr/delay.h>

int main(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	DDRA=0X09;
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	89 e0       	ldi	r24, 0x09	; 9
  7a:	80 83       	st	Z, r24
	DDRC=0X00;
  7c:	e4 e3       	ldi	r30, 0x34	; 52
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1

	while(1)
	{
		if((PINC &(1<<PC0))&&(PINC &(1<<PC5)))
  82:	e3 e3       	ldi	r30, 0x33	; 51
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	88 2f       	mov	r24, r24
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	81 70       	andi	r24, 0x01	; 1
  8e:	90 70       	andi	r25, 0x00	; 0
  90:	98 2f       	mov	r25, r24
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	88 23       	and	r24, r24
  98:	c1 f4       	brne	.+48     	; 0xca <main+0x5e>
  9a:	e3 e3       	ldi	r30, 0x33	; 51
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 2f       	mov	r24, r24
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	80 72       	andi	r24, 0x20	; 32
  a6:	90 70       	andi	r25, 0x00	; 0
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	79 f0       	breq	.+30     	; 0xca <main+0x5e>
		{
			PORTA|=(1<<PA3);
  ac:	ab e3       	ldi	r26, 0x3B	; 59
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	8c 93       	st	X, r24
			PORTA|=(1<<PA0);
  ba:	ab e3       	ldi	r26, 0x3B	; 59
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	eb e3       	ldi	r30, 0x3B	; 59
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8c 93       	st	X, r24
  c8:	dc cf       	rjmp	.-72     	; 0x82 <main+0x16>
		}
		else if(PINC &(1<<PC0))
  ca:	e3 e3       	ldi	r30, 0x33	; 51
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	90 70       	andi	r25, 0x00	; 0
  d8:	88 23       	and	r24, r24
  da:	41 f0       	breq	.+16     	; 0xec <main+0x80>
			PORTA|=(1<<PA0);
  dc:	ab e3       	ldi	r26, 0x3B	; 59
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	eb e3       	ldi	r30, 0x3B	; 59
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	8c 93       	st	X, r24
  ea:	cb cf       	rjmp	.-106    	; 0x82 <main+0x16>
		else if(PINC &(1<<PC5))
  ec:	e3 e3       	ldi	r30, 0x33	; 51
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	80 72       	andi	r24, 0x20	; 32
  f8:	90 70       	andi	r25, 0x00	; 0
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	41 f0       	breq	.+16     	; 0x10e <main+0xa2>
			PORTA|=(1<<PA3);
  fe:	ab e3       	ldi	r26, 0x3B	; 59
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	eb e3       	ldi	r30, 0x3B	; 59
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	8c 93       	st	X, r24
 10c:	ba cf       	rjmp	.-140    	; 0x82 <main+0x16>
		else
			PORTA=0X00;
 10e:	eb e3       	ldi	r30, 0x3B	; 59
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
 114:	b6 cf       	rjmp	.-148    	; 0x82 <main+0x16>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
